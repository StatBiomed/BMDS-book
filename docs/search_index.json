[["index.html", "Biomedical Data Science - introduction with case studies Welcome", " Biomedical Data Science - introduction with case studies BIOF1001 teaching team 2022-07-05 Welcome Welcome to the book Biomedical Data Science - an introduction with case studies. Most contents are demonstrated with R programming language. This book is designed as the lecture notes and textbook for BIOF1001: Introduction to Biomedical Data Science, an undergraduate course (Year 1) at the University of Hong Kong. GitHub Repository: you can find the source files on StatBiomed/BMDS-book and the way to re-build this book. "],["preface.html", "Preface Introduction for readers Acknowledgements Last notes", " Preface This book is designed as the lecture notes and textbook for BIOF1001: Introduction to Biomedical Data Science, an undergraduate course (Year 1) at the University of Hong Kong. Introduction for readers What we hope you will learn from this book In part I, you will find a general introduction to data science: Quantitative methods: t-test, correlation analysis, clustering, linear regression, linear classification. Basic programming and visualisation skills: R scripts for the above methods and data visualisation. Gain familiarity with common databases in the biomedical domain. Introduce ethical, legal, social and technological issues related to biomedical data sciences. Introduce good practice in managing a data science project and communicate results to key stakeholders. In part II, you will experience data types in five different biomedical topics, which will be illustrated with both introduction and cases that are suitable for problem-based learning format: Personalised genomic medicine, by Dr David Shih and Dr Yuanhua Huang Medical imaging and digital health, by Dr Joshua Ho and Dr Lequan Yu Infectious disease informatics, by Dr Tommy Lam and Dr Kathy Leung Population genetics and diseases, by Dr Clara Tang and Dr Wanling Yang Epidemiology of cancer and other diseases, by Jason Wong and Dr Carlos Wong What we recommend you do while reading this book To enhance the knowledge and skills learned from this book, we recommend the readers Read materials provided in each module Practice quantitative skills by solving problems using R Acknowledgements Last notes "],["about-the-authors.html", "About the authors", " About the authors "],["introR.html", "Chapter 1 Introduction to R programming 1.1 Data types 1.2 Data structures 1.3 Read and write files (tables) 1.4 Functions and Packages 1.5 Plotting 1.6 Scientific and statistical computating", " Chapter 1 Introduction to R programming This notebook collects the scripts used for teaching in BIOF1001 for Introduction to R (1 hour teaching). You can get this Rmd file here. 1.1 Data types 1.1.1 nemeric (or double) x &lt;- c(1.0, 2.0, 5.0, 7.0) x ## [1] 1 2 5 7 class(x) ## [1] &quot;numeric&quot; typeof(x) ## [1] &quot;double&quot; 1.1.2 integer y &lt;- c(1L, 2L, 5L, 7L) y ## [1] 1 2 5 7 typeof(y) ## [1] &quot;integer&quot; 1.1.3 logical z &lt;- c(TRUE, TRUE, TRUE, FALSE) z ## [1] TRUE TRUE TRUE FALSE typeof(z) ## [1] &quot;logical&quot; 1.1.4 character w &lt;- c(&quot;aa&quot;, &quot;bb&quot;, &quot;5&quot;, &quot;7&quot;) w ## [1] &quot;aa&quot; &quot;bb&quot; &quot;5&quot; &quot;7&quot; typeof(w) ## [1] &quot;character&quot; 1.1.5 Memeory usage As can be seen below, integer and logical uses only half of the memory of double (numeric) and character x &lt;- c(1.0, 2.0, 5.0, 7.0) y &lt;- c(1L, 2L, 5L, 7L) z &lt;- c(TRUE, TRUE, TRUE, FALSE) w &lt;- c(&quot;aa&quot;, &quot;bb&quot;, &quot;5&quot;, &quot;7&quot;) object.size(x) ## 80 bytes object.size(rep(x, 1000)) ## 32048 bytes object.size(rep(y, 1000)) ## 16048 bytes object.size(rep(z, 1000)) ## 16048 bytes object.size(rep(w, 1000)) ## 32272 bytes 1.2 Data structures 1.2.1 Vector x &lt;- c(1, 2, 5, 7) x ## [1] 1 2 5 7 typeof(x) ## [1] &quot;double&quot; x &lt;- rep(3, 5) x ## [1] 3 3 3 3 3 typeof(x) ## [1] &quot;double&quot; x &lt;- 1:12 # integer x ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 typeof(x) ## [1] &quot;integer&quot; 1.2.2 Matrix A &lt;- matrix(1:12, nrow=3) A ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 B &lt;- matrix(1:12, nrow=3, byrow=TRUE) B ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 ## [3,] 9 10 11 12 colnames(A) &lt;- c(&quot;C1&quot;,&quot;C2&quot;,&quot;C3&quot;,&quot;C4&quot;) rownames(A) &lt;- c(&quot;R1&quot;,&quot;R2&quot;,&quot;R3&quot;) A ## C1 C2 C3 C4 ## R1 1 4 7 10 ## R2 2 5 8 11 ## R3 3 6 9 12 1.2.2.1 Index Vector and Matrix N.B., when using logical as index, be careful if the index length is different from the vector x &lt;- 1:12 x[3] ## [1] 3 x[2:5] ## [1] 2 3 4 5 x[c(2, 5, 6)] ## [1] 2 5 6 x[c(TRUE, FALSE, FALSE, TRUE)] ## [1] 1 4 5 8 9 12 Now, index matrix. Very similar as vector, but it has both row and column. A &lt;- matrix(1:12, nrow=3) colnames(A) &lt;- c(&quot;C1&quot;,&quot;C2&quot;,&quot;C3&quot;,&quot;C4&quot;) rownames(A) &lt;- c(&quot;R1&quot;,&quot;R2&quot;,&quot;R3&quot;) A[1, 2] ## [1] 4 A[1, &quot;C2&quot;] ## [1] 4 A[1, c(2, 3)] ## C2 C3 ## 4 7 A[1:2, c(2, 3)] ## C2 C3 ## R1 4 7 ## R2 5 8 Single row or column matrix will become a vector, unless using drop=FALSE A[1, 2:4] ## C2 C3 C4 ## 4 7 10 dim(A[1, 2:4]) ## NULL A[1, 2:4, drop=FALSE] ## C2 C3 C4 ## R1 4 7 10 dim(A[1, 2:4, drop=FALSE]) ## [1] 1 3 1.2.2.2 Modify values A[1, 2:4] &lt;- c(-3, -5, 20) A ## C1 C2 C3 C4 ## R1 1 -3 -5 20 ## R2 2 5 8 11 ## R3 3 6 9 12 1.2.3 List A list of any data structure: value, vector, matrix, etc x &lt;- list(2.5, TRUE, 1:3) x ## [[1]] ## [1] 2.5 ## ## [[2]] ## [1] TRUE ## ## [[3]] ## [1] 1 2 3 str(x) ## List of 3 ## $ : num 2.5 ## $ : logi TRUE ## $ : int [1:3] 1 2 3 x &lt;- list(&quot;a&quot; = 2.5, &quot;b&quot; = TRUE, &quot;c&quot; = 1:3) x ## $a ## [1] 2.5 ## ## $b ## [1] TRUE ## ## $c ## [1] 1 2 3 str(x) ## List of 3 ## $ a: num 2.5 ## $ b: logi TRUE ## $ c: int [1:3] 1 2 3 1.2.3.1 Indexing list Different from vector and matrix, for list, you need to double-layer square brackets, either by numeric index or name. Alternatively, you can also use $ symbol. x[[3]] ## [1] 1 2 3 x[[&quot;c&quot;]] ## [1] 1 2 3 x$c ## [1] 1 2 3 1.2.4 Data Frame A special type of List: A list of vectors with the same length. Widely used as a rectangular data with flexible data type (like Excel) df &lt;- data.frame(&quot;SN&quot; = 1:2, &quot;Age&quot; = c(21,15), &quot;Name&quot; = c(&quot;John&quot;,&quot;Dora&quot;)) df ## SN Age Name ## 1 1 21 John ## 2 2 15 Dora df$Age[2] ## [1] 15 # View(df) 1.2.5 Factor vs vector Factor is a data structure used for fields that takes only predefined, finite number of values (categorical data) x = c(&quot;single&quot;, &quot;married&quot;, &quot;married&quot;, &quot;single&quot;) # vector x ## [1] &quot;single&quot; &quot;married&quot; &quot;married&quot; &quot;single&quot; class(x) ## [1] &quot;character&quot; typeof(x) ## [1] &quot;character&quot; y = factor(c(&quot;single&quot;, &quot;married&quot;, &quot;married&quot;, &quot;single&quot;)) y ## [1] single married married single ## Levels: married single class(y) ## [1] &quot;factor&quot; typeof(y) ## [1] &quot;integer&quot; 1.2.5.1 Change the order of factor levels z &lt;- factor(c(&quot;single&quot;, &quot;married&quot;, &quot;married&quot;, &quot;single&quot;) , levels=c(&quot;single&quot;, &quot;married&quot;)) z ## [1] single married married single ## Levels: single married 1.2.5.2 Smaller memory as categorical data type x = c(&quot;single&quot;, &quot;married&quot;, &quot;married&quot;, &quot;single&quot;) # vector y = factor(c(&quot;single&quot;, &quot;married&quot;, &quot;married&quot;, &quot;single&quot;)) object.size(rep(x, 1000)) ## 32160 bytes object.size(rep(y, 1000)) ## 16560 bytes 1.3 Read and write files (tables) Data is available in the data folder on the github repository 1.3.1 Read file See full manuals: help(read.table) or ?read.table help(&quot;read.table&quot;) ?read.table df = read.table(&quot;./data/intro/SRP029880.colData.tsv&quot;, sep=&quot;\\t&quot;) df ## source_name group ## CASE_1 metastasized cancer CASE ## CASE_2 metastasized cancer CASE ## CASE_3 metastasized cancer CASE ## CASE_4 metastasized cancer CASE ## CASE_5 metastasized cancer CASE ## CTRL_1 normal colon CTRL ## CTRL_2 normal colon CTRL ## CTRL_3 normal colon CTRL ## CTRL_4 normal colon CTRL ## CTRL_5 normal colon CTRL 1.3.2 Write file df$frozen &lt;- c(1, 1, 0, 0, 0, 1, 1, 0, 0, 0) write.table(df, &quot;./data/outs/SRP029880.colData.add_frozen.tsv&quot;, sep=&quot;\\t&quot;, quote=FALSE) 1.4 Functions and Packages For example mean() is a function here and it is from the base package x &lt;- 4:10 mean(x) ## [1] 7 base::mean(x) ## [1] 7 1.4.1 Install packages It depends on where the package is stored. Please refers to the documentation of the specific package you want to install and use. CRAN (the Comprehensive R Archive Network): main platform For example: install.packages(\"ggplot2\") Bioconductor: primarily for biology related packages For example: BiocManager::install(\"DESeq2\") #install.packages(&quot;ggplot2&quot;) 1.5 Plotting 1.5.1 datasets Using a build-in dataset for illustration: iris (4 flower features in 3plants) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 1.5.2 Basic plotting 1.5.2.1 Histogram hist(iris$Sepal.Length) 1.5.2.2 Scatter plot plot(x=iris$Sepal.Length, y=iris$Sepal.Width) 1.5.2.3 boxplot x1 &lt;- iris$Sepal.Length[iris$Species == &quot;setosa&quot;] x2 &lt;- iris$Sepal.Length[iris$Species == &quot;versicolor&quot;] x3 &lt;- iris$Sepal.Length[iris$Species == &quot;virginica&quot;] boxplot(x1, x2, x3) 1.5.3 ggplot2 1.5.3.1 Install package if (!requireNamespace(&quot;ggplot2&quot;, quietly = TRUE)) install.packages(&quot;ggplot2&quot;) 1.5.3.2 Load package library(ggplot2) 1.5.3.3 Histogram ggplot(iris, aes(x=Sepal.Length)) + geom_histogram(bins = 8) 1.5.3.4 Scatter plot ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point() 1.5.3.5 Box plot ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_boxplot() 1.6 Scientific and statistical computating 1.6.1 Orders of operators See lecture slides. If you are not sure about a certain ordering, use brackets! 5 * 2 &gt; 4 ## [1] TRUE 5 * (2 &gt; 4) ## [1] 0 1.6.2 Functions for statistics More theroy and practice to come in next session ### Correlation cor(iris$Sepal.Length, iris$Petal.Length) ## [1] 0.8717538 cor.test(iris$Sepal.Length, iris$Petal.Length) ## ## Pearson&#39;s product-moment correlation ## ## data: iris$Sepal.Length and iris$Petal.Length ## t = 21.646, df = 148, p-value &lt; 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.8270363 0.9055080 ## sample estimates: ## cor ## 0.8717538 1.6.3 Hypothesis testing (t test) x1 &lt;- iris$Sepal.Length[iris$Species == &quot;setosa&quot;] x2 &lt;- iris$Sepal.Length[iris$Species == &quot;versicolor&quot;] x3 &lt;- iris$Sepal.Length[iris$Species == &quot;virginica&quot;] t.test(x2, x3) ## ## Welch Two Sample t-test ## ## data: x2 and x3 ## t = -5.6292, df = 94.025, p-value = 1.866e-07 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.8819731 -0.4220269 ## sample estimates: ## mean of x mean of y ## 5.936 6.588 1.6.4 Regression fit &lt;- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data=iris) summary(fit) # show results ## ## Call: ## lm(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, ## data = iris) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.82816 -0.21989 0.01875 0.19709 0.84570 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.85600 0.25078 7.401 9.85e-12 *** ## Sepal.Width 0.65084 0.06665 9.765 &lt; 2e-16 *** ## Petal.Length 0.70913 0.05672 12.502 &lt; 2e-16 *** ## Petal.Width -0.55648 0.12755 -4.363 2.41e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3145 on 146 degrees of freedom ## Multiple R-squared: 0.8586, Adjusted R-squared: 0.8557 ## F-statistic: 295.5 on 3 and 146 DF, p-value: &lt; 2.2e-16 This means the fitted regression is: Sepal.Length ~ 1.856 + 0.65*Sepal.Width + 0.709*Petal.Length - 0.556*Petal.Width We can check how good the regression is by plotting it out y_pred &lt;- fit$coefficients[1] + fit$coefficients[2] * iris$Sepal.Width + fit$coefficients[3] * iris$Petal.Length + fit$coefficients[4] * iris$Petal.Width cor(iris$Sepal.Length, y_pred) ## [1] 0.926613 plot(iris$Sepal.Length, y_pred) "],["introStats.html", "Chapter 2 Introduction to Statistical testing", " Chapter 2 Introduction to Statistical testing "],["introML.html", "Chapter 3 Introduction to Machine Learning", " Chapter 3 Introduction to Machine Learning "],["genomics.html", "Chapter 4 Personalised Genomic Medicine", " Chapter 4 Personalised Genomic Medicine "],["image-digital.html", "Chapter 5 Medical Image and Digital Health", " Chapter 5 Medical Image and Digital Health "],["infectious-dis.html", "Chapter 6 Infectious Disease Informatics", " Chapter 6 Infectious Disease Informatics "],["genetics-dis.html", "Chapter 7 Population Genetics and Diseases", " Chapter 7 Population Genetics and Diseases "],["epidemiology.html", "Chapter 8 Epidemiology of Cancer and Other Diseases", " Chapter 8 Epidemiology of Cancer and Other Diseases "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
